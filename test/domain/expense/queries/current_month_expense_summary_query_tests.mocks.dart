// Mocks generated by Mockito 5.0.16 from annotations
// in spending/test/domain/expense/queries/current_month_expense_summary_query_tests.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:decimal/decimal.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:spending/src/domain/expense/expense.dart' as _i5;
import 'package:spending/src/domain/expense/expense_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

class _FakeDecimal_1 extends _i1.Fake implements _i2.Decimal {}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i3.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> create(_i2.Decimal? amount, int? expenseCategoryId,
          DateTime? occurredOn, double? latitude, double? longitude) =>
      (super.noSuchMethod(
          Invocation.method(#create,
              [amount, expenseCategoryId, occurredOn, latitude, longitude]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.Expense?> find(int? id) => (super.noSuchMethod(
      Invocation.method(#find, [id]),
      returnValue: Future<_i5.Expense?>.value()) as _i4.Future<_i5.Expense?>);
  @override
  _i4.Future<List<_i5.Expense>> getCurrentMonth() =>
      (super.noSuchMethod(Invocation.method(#getCurrentMonth, []),
              returnValue: Future<List<_i5.Expense>>.value(<_i5.Expense>[]))
          as _i4.Future<List<_i5.Expense>>);
  @override
  _i4.Future<void> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> split(int? id, int? splitExpenseCategoryId,
          _i2.Decimal? splitExpenseAmount) =>
      (super.noSuchMethod(
          Invocation.method(
              #split, [id, splitExpenseCategoryId, splitExpenseAmount]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  int saveDateTime(DateTime? dateTime) =>
      (super.noSuchMethod(Invocation.method(#saveDateTime, [dateTime]),
          returnValue: 0) as int);
  @override
  DateTime readDateTime(int? millisecondsSinceEpoch) => (super.noSuchMethod(
      Invocation.method(#readDateTime, [millisecondsSinceEpoch]),
      returnValue: _FakeDateTime_0()) as DateTime);
  @override
  String saveDecimal(_i2.Decimal? decimal) =>
      (super.noSuchMethod(Invocation.method(#saveDecimal, [decimal]),
          returnValue: '') as String);
  @override
  _i2.Decimal readDecimal(String? value) =>
      (super.noSuchMethod(Invocation.method(#readDecimal, [value]),
          returnValue: _FakeDecimal_1()) as _i2.Decimal);
  @override
  String toString() => super.toString();
}
