// Mocks generated by Mockito 5.0.16 from annotations
// in spending/test/domain/expense/queries/recommend_expense_category_query_tests.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:decimal/decimal.dart' as _i2;
import 'package:haversine_distance/haversine_distance.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:spending/src/domain/expense/expense.dart' as _i6;
import 'package:spending/src/domain/expense/expense_repository.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

class _FakeDecimal_1 extends _i1.Fake implements _i2.Decimal {}

class _FakeRADII_2 extends _i1.Fake implements _i3.RADII {}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i4.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> create(_i2.Decimal? amount, int? expenseCategoryId,
          DateTime? occurredOn, double? latitude, double? longitude) =>
      (super.noSuchMethod(
          Invocation.method(#create,
              [amount, expenseCategoryId, occurredOn, latitude, longitude]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i6.Expense?> find(int? id) => (super.noSuchMethod(
      Invocation.method(#find, [id]),
      returnValue: Future<_i6.Expense?>.value()) as _i5.Future<_i6.Expense?>);
  @override
  _i5.Future<List<_i6.Expense>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i6.Expense>>.value(<_i6.Expense>[]))
          as _i5.Future<List<_i6.Expense>>);
  @override
  _i5.Future<void> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> split(int? id, int? splitExpenseCategoryId,
          _i2.Decimal? splitExpenseAmount) =>
      (super.noSuchMethod(
          Invocation.method(
              #split, [id, splitExpenseCategoryId, splitExpenseAmount]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  int saveDateTime(DateTime? dateTime) =>
      (super.noSuchMethod(Invocation.method(#saveDateTime, [dateTime]),
          returnValue: 0) as int);
  @override
  DateTime readDateTime(int? millisecondsSinceEpoch) => (super.noSuchMethod(
      Invocation.method(#readDateTime, [millisecondsSinceEpoch]),
      returnValue: _FakeDateTime_0()) as DateTime);
  @override
  String saveDecimal(_i2.Decimal? decimal) =>
      (super.noSuchMethod(Invocation.method(#saveDecimal, [decimal]),
          returnValue: '') as String);
  @override
  _i2.Decimal readDecimal(String? value) =>
      (super.noSuchMethod(Invocation.method(#readDecimal, [value]),
          returnValue: _FakeDecimal_1()) as _i2.Decimal);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HaversineDistance].
///
/// See the documentation for Mockito's code generation for more information.
class MockHaversineDistance extends _i1.Mock implements _i3.HaversineDistance {
  MockHaversineDistance() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RADII get radii => (super.noSuchMethod(Invocation.getter(#radii),
      returnValue: _FakeRADII_2()) as _i3.RADII);
  @override
  double toRad(double? num) =>
      (super.noSuchMethod(Invocation.method(#toRad, [num]), returnValue: 0.0)
          as double);
  @override
  int getUnit(_i3.Unit? unit) =>
      (super.noSuchMethod(Invocation.method(#getUnit, [unit]), returnValue: 0)
          as int);
  @override
  double haversine(_i3.Location? startCoordinates, _i3.Location? endCoordinates,
          _i3.Unit? unit) =>
      (super.noSuchMethod(
          Invocation.method(
              #haversine, [startCoordinates, endCoordinates, unit]),
          returnValue: 0.0) as double);
  @override
  String toString() => super.toString();
}
